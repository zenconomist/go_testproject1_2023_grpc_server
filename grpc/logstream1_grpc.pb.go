// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: logstream1.proto

package logstream1_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	LogEventService_StreamLogEvents_FullMethodName = "/logevents.LogEventService/StreamLogEvents"
)

// LogEventServiceClient is the client API for LogEventService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LogEventServiceClient interface {
	StreamLogEvents(ctx context.Context, in *StreamLogEventsRequest, opts ...grpc.CallOption) (LogEventService_StreamLogEventsClient, error)
}

type logEventServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLogEventServiceClient(cc grpc.ClientConnInterface) LogEventServiceClient {
	return &logEventServiceClient{cc}
}

func (c *logEventServiceClient) StreamLogEvents(ctx context.Context, in *StreamLogEventsRequest, opts ...grpc.CallOption) (LogEventService_StreamLogEventsClient, error) {
	stream, err := c.cc.NewStream(ctx, &LogEventService_ServiceDesc.Streams[0], LogEventService_StreamLogEvents_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &logEventServiceStreamLogEventsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type LogEventService_StreamLogEventsClient interface {
	Recv() (*LogEvent, error)
	grpc.ClientStream
}

type logEventServiceStreamLogEventsClient struct {
	grpc.ClientStream
}

func (x *logEventServiceStreamLogEventsClient) Recv() (*LogEvent, error) {
	m := new(LogEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// LogEventServiceServer is the server API for LogEventService service.
// All implementations must embed UnimplementedLogEventServiceServer
// for forward compatibility
type LogEventServiceServer interface {
	StreamLogEvents(*StreamLogEventsRequest, LogEventService_StreamLogEventsServer) error
	mustEmbedUnimplementedLogEventServiceServer()
}

// UnimplementedLogEventServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLogEventServiceServer struct {
}

func (UnimplementedLogEventServiceServer) StreamLogEvents(*StreamLogEventsRequest, LogEventService_StreamLogEventsServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamLogEvents not implemented")
}
func (UnimplementedLogEventServiceServer) mustEmbedUnimplementedLogEventServiceServer() {}

// UnsafeLogEventServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LogEventServiceServer will
// result in compilation errors.
type UnsafeLogEventServiceServer interface {
	mustEmbedUnimplementedLogEventServiceServer()
}

func RegisterLogEventServiceServer(s grpc.ServiceRegistrar, srv LogEventServiceServer) {
	s.RegisterService(&LogEventService_ServiceDesc, srv)
}

func _LogEventService_StreamLogEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamLogEventsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LogEventServiceServer).StreamLogEvents(m, &logEventServiceStreamLogEventsServer{stream})
}

type LogEventService_StreamLogEventsServer interface {
	Send(*LogEvent) error
	grpc.ServerStream
}

type logEventServiceStreamLogEventsServer struct {
	grpc.ServerStream
}

func (x *logEventServiceStreamLogEventsServer) Send(m *LogEvent) error {
	return x.ServerStream.SendMsg(m)
}

// LogEventService_ServiceDesc is the grpc.ServiceDesc for LogEventService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LogEventService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "logevents.LogEventService",
	HandlerType: (*LogEventServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamLogEvents",
			Handler:       _LogEventService_StreamLogEvents_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "logstream1.proto",
}
